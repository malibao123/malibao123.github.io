<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git-基础使用</title>
      <link href="/2018/05/21/git-ji-chu-shi-yong/"/>
      <url>/2018/05/21/git-ji-chu-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="一-、版本控制系统的发展"><a href="#一-、版本控制系统的发展" class="headerlink" title="一 、版本控制系统的发展"></a>一 、版本控制系统的发展</h2><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>什么是“版本控制”？我为什么要关心它呢？ 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p><p>如果你是位图形或网页设计师，可能会需要保存某一幅图片或页面布局文件的所有修订版本（这或许是你非常渴望拥有的功能），采用版本控制系统（VCS）是个明智的选择。 有了它你就可以将选定的文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。 使用版本控制系统通常还意味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。 但额外增加的工作量却微乎其微。</p><hr><h3 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h3><p>本地版本控制 —-&gt; 集中化的版本控制 ——-&gt;分布式版本控制</p><p>1.本地版本控制 : 单一开发者记录本地文件历次更新差异的记录管理  ;  缺点：不同开发者不能对同一文件协作开发困难</p><p><img src="/2018/05/21/git-ji-chu-shi-yong/5.png" alt></p><p>2.集中化的版本控制 : 不同开发者对单一服务器进行更新差异的管理； 缺点 : 服务器的单一，一旦出现故障，可能会出现重大数据丢失。</p><p><img src="/2018/05/21/git-ji-chu-shi-yong/6.png" alt></p><p>3.分布式版本控制 : 不同开发者在本地对单一服务器进行镜像克隆，每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</p><p><img src="/2018/05/21/git-ji-chu-shi-yong/7.png" alt></p><h3 id="Git-工作区、暂存区和版本库"><a href="#Git-工作区、暂存区和版本库" class="headerlink" title="Git 工作区、暂存区和版本库"></a>Git 工作区、暂存区和版本库</h3><ul><li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li><li><strong>暂存区：</strong>英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li><li><strong>版本库：</strong>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li></ul><p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg" alt="img"></p><hr><p><img src="/2018/05/21/git-ji-chu-shi-yong/4.png" alt></p><p><img src="/2018/05/21/git-ji-chu-shi-yong/3.png" alt></p><p>例如： 图一，这个是我从GitHub上git clone 到本地的一个仓库。 .git 文件夹即版本库，红色框 即工作区；打开 .git 文件夹，如图二，有一个index文件夹即暂存区；</p><hr><h2 id="二-、Git-分布式版本控制系统"><a href="#二-、Git-分布式版本控制系统" class="headerlink" title="二 、Git 分布式版本控制系统"></a>二 、Git 分布式版本控制系统</h2><h3 id="1-Git-工作流程"><a href="#1-Git-工作流程" class="headerlink" title="1 . Git 工作流程"></a>1 . Git 工作流程</h3><ol><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ol><p>下图展示了 Git 的工作流程：</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/git-process.png" alt="img"></p><h2 id="三-，git-基础"><a href="#三-，git-基础" class="headerlink" title="三 ，git 基础"></a>三 ，git 基础</h2><h3 id="3-1-获取Git-仓库"><a href="#3-1-获取Git-仓库" class="headerlink" title="3.1 获取Git 仓库"></a>3.1 获取Git 仓库</h3><p>通常有两种获取 Git 项目仓库的方式：</p><p>​            <span style="color:green">1 . 将尚未进行版本控制的本地目录转换为 Git 仓库；</span></p><p>​            <span style="color:green">2 . 从其它服务器 克隆 一个已存在的 Git 仓库。</span></p><hr><p><strong>对已有项目进行初始化仓库，进行版本控制：</strong></p><p>​            如果你有 一个本地项目，想进行版本控制，首先进入项目的根目录，鼠标右击 git bash Hear，执行以下命令 ; 这会在根目录生成一个 <strong>.git</strong> 文件夹</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> init</code></pre><p><img src="/2018/05/21/git-ji-chu-shi-yong/8.png" alt></p><p>如上图，这个项目文件夹中存在3个模块，如data1，data2，data3，你本人对data1进行修改，则可以使用add命令，把data1 放入暂存区，在进行commit 之前，对data1 的所有操作，都会被记录下来。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> add data1    <span class="token comment" spellcheck="true">## 把data1 放入暂存区</span>$ <span class="token function">git</span> add *        <span class="token comment" spellcheck="true">## 把所有文件,即data1,data2,data3 全部放入暂存区</span>$ <span class="token function">git</span> add data4/   <span class="token comment" spellcheck="true">## 把data4文件夹所有文件放入暂存区</span></code></pre><hr><h5 id="从其它服务器-克隆-一个已存在的-Git-仓库"><a href="#从其它服务器-克隆-一个已存在的-Git-仓库" class="headerlink" title="从其它服务器 克隆 一个已存在的 Git 仓库"></a><strong>从其它服务器 克隆 一个已存在的 Git 仓库</strong></h5><p>如果你想获得一份已经存在了的 Git 仓库的拷贝，比如说，你想为某个开源项目贡献自己的一份力，这时就要用到 <code>git clone</code> 命令。如图 我想要得到下图仓库的本地副本，</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/malibao123/spider.git  <span class="token comment" spellcheck="true">## 使用htts 协议</span>$ <span class="token function">git</span> git@github.com:malibao123/spider.git            <span class="token comment" spellcheck="true">## 使用git 协议</span></code></pre><h3 id="3-2-记录每次更新到仓库"><a href="#3-2-记录每次更新到仓库" class="headerlink" title="3.2 记录每次更新到仓库"></a>3.2 记录每次更新到仓库</h3><p>3.2.1 文件分为两种状态，<strong>以追踪 *<em>和 *</em>未追踪</strong>；对以追踪的文件所有修改操作都会记录在版本库中，可以随时查看。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> status <span class="token comment" spellcheck="true">## 检查文件状态</span><span class="token function">git</span> status -s  <span class="token comment" spellcheck="true">## 或者 git status --short 得到一种格式更为紧凑的输出</span><span class="token comment" spellcheck="true">## 如下面例子</span><span class="token comment" spellcheck="true"># 新添加的未跟踪文件前面有 ?? 标记，</span><span class="token comment" spellcheck="true"># 新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。 </span><span class="token comment" spellcheck="true"># 输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。</span><span class="token comment" spellcheck="true"># 例如，下面的状态报告显示： README 文件在工作区已修改但尚未暂存，而 lib/simplegit.rb 文件已修改且已暂存。 Rakefile 文件已修，暂存后又作了修改，因此该文件的修改中# 既有已暂存的部分，又有未暂存的部分。</span>$ <span class="token function">git</span> status -s M READMEMM RakefileA  lib/git.rbM  lib/simplegit.rb?? LICENSE.txt</code></pre><p>3.2.2 追踪新文件； 当追踪文件被修改后,需要再次使用add命令，把文件的最新修改版 放入暂存区</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> add data1    <span class="token comment" spellcheck="true">## 把data1 放入暂存区</span>$ <span class="token function">git</span> add *        <span class="token comment" spellcheck="true">## 把所有文件,即data1,data2,data3 全部放入暂存区</span>$ <span class="token function">git</span> add data4/   <span class="token comment" spellcheck="true">## 把data4文件夹所有文件放入暂存区     </span></code></pre><p>3.2.3 忽略文件</p><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 <code>.gitignore</code> 的文件，列出要忽略的文件的模式。 来看一个实际的 <code>.gitignore</code> 例子：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> .gitignore*.<span class="token punctuation">[</span>oa<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#忽略所有以 .a 或者 .o 结尾的文件。</span>*~     <span class="token comment" spellcheck="true">#忽略所有以 ~结尾的文件</span></code></pre><p>3.2.4 查看<strong>尚未暂存</strong>的文件更新了哪些部分，如没有显示 则表示没有进行修改</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">diff</span></code></pre><p>3.2.5 比对<strong>已暂存文件</strong>与<strong>最后一次提交</strong>的文件差异</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">diff</span> --staged</code></pre><p>3.2.6 提交更新</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> commit -m 提交信息  <span class="token comment" spellcheck="true">#自定义提交信息，比如 first commit  或者second commit</span></code></pre><p>3.2.7 移除文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">rm</span> -f <span class="token operator">&lt;</span>filename<span class="token operator">></span>  <span class="token comment" spellcheck="true"># 删除文件</span>$ <span class="token function">git</span> <span class="token function">rm</span> --cached <span class="token operator">&lt;</span>filename<span class="token operator">></span>  <span class="token comment" spellcheck="true"># 把文件以 追踪状态 变为 未追踪状态(即从暂存区删除)</span></code></pre><h3 id="3-3-查看提交历史"><a href="#3-3-查看提交历史" class="headerlink" title="3.3 查看提交历史"></a>3.3 查看提交历史</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> log  <span class="token comment" spellcheck="true">#会按时间先后顺序列出所有的提交，最近的更新排在最上面</span>$ <span class="token function">git</span> log -p <span class="token comment" spellcheck="true"># 会显示每次提交所引入的差异（按 补丁 的格式输出）</span>$ <span class="token function">git</span> log -p -2 <span class="token comment" spellcheck="true"># -2 选项来只显示最近的两次提交</span></code></pre><h3 id="3-4撤消操作"><a href="#3-4撤消操作" class="headerlink" title="3.4撤消操作"></a>3.4撤消操作</h3><p>3.4.1 文件补交</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> commit -m <span class="token string">'initial commit'</span>  $ <span class="token function">git</span> add forgotten_file$ <span class="token function">git</span> commit --amend<span class="token comment" spellcheck="true">#当你提交完数据后发现 forgotten_file 这个文件忘了提交，使用git commit --amend 进行补交</span><span class="token comment" spellcheck="true"># 注意 ： 当你在修补最后的提交时，并不是通过用改进后的提交 原位替换 掉旧有提交的方式来修复的， 理解这一点非常重# 要。从效果上来说，就像是旧有的提交从未存在过一样，它并不会出现在仓库的历史中。</span></code></pre><p>3.4.2 取消暂存的文件</p><p>当暂存区有两个 a，b 文件，但是现在只想提交 a文件，不想提交b文件；可以把b文件从暂存区撤销掉</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset HEAD <span class="token operator">&lt;</span>filename<span class="token operator">></span><span class="token comment" spellcheck="true">#例子：</span>    <span class="token function">git</span> reset HEAD b</code></pre><p>3.4.3 撤消对文件的修改 (恢复到最近一次开始追踪的状态)</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -- <span class="token operator">&lt;</span>filename<span class="token operator">></span></code></pre><h3 id="3-5-远程仓库的使用"><a href="#3-5-远程仓库的使用" class="headerlink" title="3.5 远程仓库的使用"></a>3.5 远程仓库的使用</h3><p>3.5.1 查看远程仓库</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token comment" spellcheck="true"># 列出你指定的每一个远程服务器的简写.如果你已经克隆了自己的仓库，那么至少应该能看到 origin ——这                #    是 Git 给你克隆的仓库服务器的默认名字</span>$ <span class="token function">git</span> remote -v <span class="token comment" spellcheck="true">#显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL</span></code></pre><p>3.5.2 添加远程仓库</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> remote add <span class="token operator">&lt;</span>shortname<span class="token operator">></span> <span class="token operator">&lt;</span>url<span class="token operator">></span> <span class="token comment" spellcheck="true"># shortname 自定义简称 来代替url</span></code></pre><p>3.5.3 从远程仓库中抓取与拉取</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> fetch <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token comment" spellcheck="true">#只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作。</span><span class="token comment" spellcheck="true">#如果你的当前分支设置了跟踪远程分支，那么可以用 git pull 命令来自动抓取后合并该远程分支到当前分支。</span></code></pre><p>3.5.4 推送到远程仓库</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> push origin master<span class="token comment" spellcheck="true">#只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 当你和其他人在同一时间克隆，他们</span><span class="token comment" spellcheck="true">#先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。 你必须先抓取他们的工作 git pull 并将其合并进你的工作后才能推送。</span></code></pre><p>3.5.5 查看某个远程仓库</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> remote show  <span class="token comment" spellcheck="true"># 查看所有远程仓库</span>$ <span class="token function">git</span> remote show <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token comment" spellcheck="true"># 列出该远程仓库的 URL 与跟踪分支的信息</span>$ <span class="token function">git</span> remote show  <span class="token comment" spellcheck="true"># 查看所有远程仓库</span>$ <span class="token function">git</span> remote show <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token comment" spellcheck="true"># 列出该远程仓库的 URL 与跟踪分支的信息</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Git工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
